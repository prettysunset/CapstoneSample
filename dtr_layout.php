<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>DTR - Monthly Daily Time Record (Prototype)</title>
<style>
  :root{
    --pink:#ffb6d5;
    --pink-strong:#ff66a3;
    --accent:#cc0066;
    --muted:#666;
    --table-border:#ffd6e8;
  }
  body{
    font-family: "Segoe UI", Roboto, Arial, sans-serif;
    background:#fff7fb;
    margin:20px;
    color:#222;
  }

  header{ text-align:center; margin-bottom:12px;}
  h1{ margin:6px 0; color:var(--accent); font-size:20px; }
  .meta{ text-align:center; color:var(--muted); margin-bottom:18px;}

  .controls{ text-align:center; margin-bottom:12px; }
  .controls button{
    background:var(--pink-strong); color:white; border:none; padding:8px 14px; margin:6px; border-radius:8px;
    cursor:pointer; font-weight:600;
  }
  .controls button:hover{ filter:brightness(.95); }

  .month-label{ text-align:center; font-weight:700; margin-top:12px; color:var(--accent); }

  /* Table */
  .dtr-wrap{ overflow:auto; background:white; padding:12px; border-radius:10px; box-shadow:0 6px 18px rgba(0,0,0,.06); border:1px solid var(--table-border); }
  table.dtr{
    width:100%; border-collapse:collapse; font-size:13px;
  }
  table.dtr th, table.dtr td{
    padding:8px 6px; border:1px solid var(--table-border); text-align:center;
  }
  table.dtr thead th{ background:#fff0f6; color:var(--accent); font-weight:700; }
  table.dtr tbody td.timecell{ min-width:86px; cursor:text; background:#fff; }
  table.dtr tbody td.day{ width:48px; background:#fff0f6; color:var(--accent); font-weight:600; }

  .hours-cell, .minutes-cell{ width:70px; background:#fff; }

  tfoot td{ font-weight:700; background:#fff7fb; color:var(--accent); }

  /* current day highlight */
  tr.today td{ outline:3px solid rgba(255,102,163,.12); }

  /* small print & signatures */
  .footer-notes{ display:flex; gap:20px; margin-top:14px; align-items:flex-start; }
  .sig{
    flex:1; padding:10px; background:#fff; border:1px dashed #ffd6e8; border-radius:8px; text-align:left;
  }
  .sig b{ display:block; margin-bottom:6px; color:var(--accent); }
  /* print */
  @media print{
    body{ background:white; margin:0; }
    .controls, .print-hide{ display:none !important; }
    .dtr-wrap{ box-shadow:none; border:none; padding:0; }
    table.dtr th, table.dtr td{ font-size:11px; padding:6px; }
  }
</style>
</head>
<body>

<header>
  <h1>DAILY TIME RECORD</h1>
  <div class="meta">Name: <strong id="employeeName">(Student Name)</strong> â€” For the month of <span id="monthName">September</span></div>
</header>

<div class="controls print-hide">
  <button onclick="timeIn('amIn')">AM Time In</button>
  <button onclick="timeOut('amOut')">AM Time Out</button>
  <button onclick="timeIn('pmIn')">PM Time In</button>
  <button onclick="timeOut('pmOut')">PM Time Out</button>
  <button onclick="openManualEntry()">Manual Entry</button>
  <button onclick="window.print()">Print DTR</button>
</div>

<div class="month-label">SEPTEMBER</div>

<div class="dtr-wrap">
  <table class="dtr" id="dtrTable" aria-label="Daily Time Record">
    <thead>
      <tr>
        <th>Day</th>
        <th colspan="2">A.M.</th>
        <th colspan="2">P.M.</th>
        <th>Hours</th>
        <th>Minutes</th>
      </tr>
      <tr>
        <th></th>
        <th>Arrival</th>
        <th>Departure</th>
        <th>Arrival</th>
        <th>Departure</th>
        <th></th>
        <th></th>
      </tr>
    </thead>
    <tbody id="dtrBody">
      <!-- generated by JS -->
    </tbody>
    <tfoot>
      <tr>
        <td colspan="5" style="text-align:right">TOTAL</td>
        <td id="totalHours">0</td>
        <td id="totalMinutes">0</td>
      </tr>
    </tfoot>
  </table>
</div>

<div class="footer-notes">
  <div class="sig">
    <b>Certified Correct:</b>
    I certify on my honor that the above is a true and correct report of the hours of work performed...
  </div>
  <div class="sig">
    <b>For Verification:</b>
    HR Officer: _______________________<br> Date: ___________
  </div>
</div>

<!-- Manual modal (simple prompt-based) -->
<script>
/*
  DTR prototype script
  - Fixed rows 1..31 (we use 30 or 31 depending on month; September is 30)
  - Buttons write current time to today's row (browser local time)
  - Cells are editable by clicking; valid format HH:MM (24h or 12h with AM/PM acceptable)
  - Hours computed per day: sum(AM diff, PM diff)
*/

const MONTH = 9; // September (1-based)
const DAYS_IN_MONTH = 30; // September has 30 days
const dtrBody = document.getElementById('dtrBody');
const records = {}; // store per-day data

// Helper: format time HH:MM (24h)
function formatHM(date){
  const h = date.getHours().toString().padStart(2,'0');
  const m = date.getMinutes().toString().padStart(2,'0');
  return `${h}:${m}`;
}

// create table rows
function buildTable(){
  for(let day=1; day<=DAYS_IN_MONTH; day++){
    records[day] = { amIn:'', amOut:'', pmIn:'', pmOut:'', hours:0, minutes:0 };
    const tr = document.createElement('tr');
    tr.id = `row-${day}`;
    tr.innerHTML = `
      <td class="day">${day}</td>
      <td class="timecell" id="amIn-${day}" contenteditable="true"></td>
      <td class="timecell" id="amOut-${day}" contenteditable="true"></td>
      <td class="timecell" id="pmIn-${day}" contenteditable="true"></td>
      <td class="timecell" id="pmOut-${day}" contenteditable="true"></td>
      <td class="hours-cell" id="hrs-${day}">0</td>
      <td class="minutes-cell" id="min-${day}">0</td>
    `;
    dtrBody.appendChild(tr);
  }
  highlightToday();
}

// determine today's day number (only allow writing if same month)
function getTodayDay(){
  const now = new Date();
  const month = now.getMonth() + 1; // JS months 0-based
  if(month !== MONTH){
    // allow demo, but show message
    // return null;
    // For convenience in demo, allow write if browser date not sept: we still map to day-of-month clamped to 1..DAYS_IN_MONTH
  }
  let d = now.getDate();
  if(d < 1) d = 1;
  if(d > DAYS_IN_MONTH) d = DAYS_IN_MONTH;
  return d;
}

// highlight current row (today)
function highlightToday(){
  const today = new Date();
  const d = getTodayDay();
  // remove previous highlight
  document.querySelectorAll('tr.today').forEach(r=>r.classList.remove('today'));
  const r = document.getElementById(`row-${d}`);
  if(r) r.classList.add('today');
}

// write time in target cell (amIn, amOut, pmIn, pmOut)
function writeTime(field){
  const day = getTodayDay();
  if(!day) return alert('Date outside month in this demo.');
  const now = new Date();
  const t = formatHM(now);
  records[day][field] = t;
  document.getElementById(`${field}-${day}`).textContent = t;
  // after write, try calculating if both in/out exist
  computeDay(day);
}

// wrappers
function timeIn(which){ // 'amIn' or 'pmIn'
  writeTime(which);
}
function timeOut(which){
  writeTime(which);
}

// parse time string HH:MM into minutes since midnight; returns null if invalid
function parseHM(s){
  if(!s) return null;
  s = s.trim();
  // Accept 12h with AM/PM (optional)
  const ampm = /([ap]\.?m\.?)$/i.test(s);
  if(ampm){
    const parts = s.split(/[:\s]+/).filter(Boolean);
    // try new Date
  }
  // simplest: accept hh:mm (24-hr)
  const m = s.match(/^(\d{1,2}):(\d{2})$/);
  if(!m) return null;
  let hh = parseInt(m[1],10);
  let mm = parseInt(m[2],10);
  if(hh<0||hh>23||mm<0||mm>59) return null;
  return hh*60 + mm;
}

// compute minutes difference (end - start), if negative return 0
function minutesDiff(startStr, endStr){
  const a = parseHM(startStr);
  const b = parseHM(endStr);
  if(a===null || b===null) return 0;
  const diff = b - a;
  return diff > 0 ? diff : 0;
}

function computeDay(day){
  const rec = records[day];
  // update record from DOM in case of manual edits
  rec.amIn = document.getElementById(`amIn-${day}`).textContent.trim();
  rec.amOut = document.getElementById(`amOut-${day}`).textContent.trim();
  rec.pmIn = document.getElementById(`pmIn-${day}`).textContent.trim();
  rec.pmOut = document.getElementById(`pmOut-${day}`).textContent.trim();

  let totalMin = 0;
  totalMin += minutesDiff(rec.amIn, rec.amOut);
  totalMin += minutesDiff(rec.pmIn, rec.pmOut);

  rec.hours = Math.floor(totalMin / 60);
  rec.minutes = totalMin % 60;

  document.getElementById(`hrs-${day}`).textContent = rec.hours;
  document.getElementById(`min-${day}`).textContent = rec.minutes;

  updateTotals();
}

// recalc totals
function updateTotals(){
  let th = 0, tm = 0;
  for(let day=1; day<=DAYS_IN_MONTH; day++){
    th += records[day].hours;
    tm += records[day].minutes;
  }
  th += Math.floor(tm/60);
  tm = tm % 60;
  document.getElementById('totalHours').textContent = th;
  document.getElementById('totalMinutes').textContent = tm;
}

// manual entry prompt
function openManualEntry(){
  const dayStr = prompt(`Enter day number (1-${DAYS_IN_MONTH}) to edit:`);
  const day = parseInt(dayStr,10);
  if(!day || day<1 || day> DATES_IN_MONTH) return alert('Invalid day.');
}

// allow inline edits to recompute when cell loses focus
document.addEventListener('focusout', (e)=>{
  const el = e.target;
  if(el && el.classList && el.classList.contains('timecell')){
    // find which cell, parse id like amIn-5
    const id = el.id;
    const parts = id.split('-');
    if(parts.length===2){
      const field = parts[0];
      const day = parseInt(parts[1],10);
      computeDay(day);
    }
  }
});

// initialize table
buildTable();

// attach keyboard-ish helper to allow manual editing and recompute on Enter
document.addEventListener('keydown', (e)=>{
  if(e.key === 'Enter' && document.activeElement && document.activeElement.classList.contains('timecell')){
    e.preventDefault();
    document.activeElement.blur();
  }
});

// small safety: if user pastes non-standard times, computeDay handles invalids as zero
</script>
</body>
</html>
